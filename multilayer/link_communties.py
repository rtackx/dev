import sysfilename_com_layer1 = sys.argv[1]filename_com_layer2 = sys.argv[2]filename_edges_layer1 = sys.argv[3]filename_edges_layer2 = sys.argv[4]filename_edges_couplings = sys.argv[5]outdir = sys.argv[6]nodes_layer1 = {}nodes_layer2 = {}weight_com = {}nodes_edges_layer1_inside_coms = {}nodes_edges_layer2_inside_coms = {}nodes_edges_couplings = {}id_com_layer1 = 0with open(filename_com_layer1, 'r') as file:	for line in file:			line = line.replace('\n', '').split()						line.pop(0)			weight_com[id_com_layer1] = {}						for index_node in line:				nodes_layer1[index_node] = id_com_layer1				nodes_edges_layer1_inside_coms[index_node] = 0				nodes_edges_couplings[index_node] = 0			id_com_layer1 += 1print "Layer 1 : " + str(id_com_layer1) + " communities (ID [0;" + str(id_com_layer1-1) + "])"print "Layer 1 : " + str(len(nodes_layer1)) + " nodes"id_com_layer2 = id_com_layer1with open(filename_com_layer2, 'r') as file:	for line in file:			line = line.replace('\n', '').split()						id_com = line.pop(0)			weight_com[id_com_layer2] = {}			for index_node in line:				nodes_layer2[index_node] = id_com_layer2				nodes_edges_layer2_inside_coms[index_node] = 0				nodes_edges_couplings[index_node] = 0			id_com_layer2 += 1print "Layer 2 : " + str(id_com_layer2-id_com_layer1) + " communities (ID [" + str(id_com_layer1) + ";" + str(id_com_layer2-1) + "])"print "Layer 2 : " + str(len(nodes_layer2)) + " nodes"nb_link_l1 = 0with open(filename_edges_layer1, 'r') as file:	for line in file:			line = line.replace('\n', '').split()			id_com1 = nodes_layer1[line[0]]			id_com2 = nodes_layer1[line[1]]						if id_com1 != id_com2:				if id_com2 not in weight_com[id_com1] and id_com1 not in weight_com[id_com2]:					nb_link_l1 += 1					weight_com[id_com1][id_com2] = 0					weight_com[id_com2][id_com1] = 0				weight_com[id_com1][id_com2] += 1				weight_com[id_com2][id_com1] += 1			else:				nodes_edges_layer1_inside_coms[line[0]] += 1				nodes_edges_layer1_inside_coms[line[1]] += 1print "Number of links between com of layer1 : " + str(nb_link_l1)nb_link_l2 = 0with open(filename_edges_layer2, 'r') as file:	for line in file:			line = line.replace('\n', '').split()			id_com1 = nodes_layer2[line[0]]			id_com2 = nodes_layer2[line[1]] 			if id_com1 != id_com2:				if id_com2 not in weight_com[id_com1] and id_com1 not in weight_com[id_com2]:					nb_link_l2 += 1					weight_com[id_com1][id_com2] = 0					weight_com[id_com2][id_com1] = 0				weight_com[id_com1][id_com2] += 1				weight_com[id_com2][id_com1] += 1			else:				nodes_edges_layer2_inside_coms[line[0]] += 1				nodes_edges_layer2_inside_coms[line[1]] += 1print "Number of links between com of layer2 : " + str(nb_link_l2)nb_link_l1_l2 = 0with open(filename_edges_couplings, 'r') as file:	for line in file:			line = line.replace('\n', '').split()			id_com1 = nodes_layer1[line[0]]						id_com2 = nodes_layer2[line[1]]			nodes_edges_couplings[line[0]] += 1			nodes_edges_couplings[line[1]] += 1			if id_com1 != id_com2:				if id_com2 not in weight_com[id_com1] and id_com1 not in weight_com[id_com2]:					nb_link_l1_l2 += 1					weight_com[id_com1][id_com2] = 0					weight_com[id_com2][id_com1] = 0				weight_com[id_com1][id_com2] += 1				weight_com[id_com2][id_com1] += 1print "Number of links between com of layer1 and layer2 : " + str(nb_link_l1_l2)nb_isolted_com = 0outfile = outdir + "/users-locations_coms.weights"f = open(outfile, 'w')for id_com1 in weight_com:	if len(weight_com[id_com1]) == 0:		nb_isolted_com += 1		#f.write(str(id_com1) + " " + str(id_com1) + '\n')		f.write(str(id_com1) + " " + str(id_com1) + ' 1\n')	else:		for id_com2 in weight_com[id_com1]:			f#.write(str(id_com1) + " " + str(id_com2) + '\n')			f.write(str(id_com1) + " " + str(id_com2) + " " + str(weight_com[id_com1][id_com2]) + '\n')f.close()print "Number of isolated com : " + str(nb_isolted_com)coms_nodes = {}outfile_nodes_coms = outdir + "/unfold_coms"f_coms = open(outfile_nodes_coms, 'w')for id_com_l1 in range(0, id_com_layer1):	coms_nodes[id_com_l1] = []	f_coms.write(str(id_com_l1))	for id_node in nodes_layer1:		if nodes_layer1[id_node] == id_com_l1:			coms_nodes[id_com_l1].append(id_node)			f_coms.write(" " + id_node)	f_coms.write('\n')for id_com_l2 in range(id_com_layer1, id_com_layer2):	coms_nodes[id_com_l2] = []	f_coms.write(str(id_com_l2))	for id_node in nodes_layer2:		if nodes_layer2[id_node] == id_com_l2:			coms_nodes[id_com_l2].append(id_node)			f_coms.write(" " + id_node)	f_coms.write('\n')f_coms.close()f1 = open(outdir + "/bipartite.edgelist", 'w')f2 = open(outdir + "/bipartite.edgelist.weights", 'w')for id_com1 in range(0, id_com_layer1):	for id_com2 in range(id_com_layer1, id_com_layer2):		if id_com2 in weight_com[id_com1]:			f1.write(str(id_com1) + " " + str(id_com2) + "\n")			f2.write(str(id_com1) + " " + str(id_com2) + " " + str(weight_com[id_com1][id_com2]) + "\n")f1.close()f2.close()f = open(outdir + "/nb_intra_edges_size_com_layer1", 'w')for id_com_l1 in range(0, id_com_layer1):	nb_intra_edges = 0	for id_node in coms_nodes[id_com_l1]:		nb_intra_edges += nodes_edges_layer1_inside_coms[id_node]	f.write(str(id_com_l1) + " " + str(nb_intra_edges) + " " + str(len(coms_nodes[id_com_l1])) + "\n")f.close()f = open(outdir + "/nb_intra_edges_size_com_layer2", 'w')for id_com_l2 in range(id_com_layer1, id_com_layer2):	nb_intra_edges = 0	for id_node in coms_nodes[id_com_l2]:		nb_intra_edges += nodes_edges_layer2_inside_coms[id_node]	f.write(str(id_com_l2) + " " + str(nb_intra_edges) + " " + str(len(coms_nodes[id_com_l2])) + "\n")f.close()'''outfile_stats = outdir + "/proportion_coupling_links_coms_layer1"f = open(outfile_stats, 'w')for id_node in nodes_edges_layer1_inside_coms:	p = nodes_edges_couplings[id_node] / (1.0 * nodes_edges_layer1_inside_coms[id_node])	f.write(id_node + " " + str(p) + '\n')f.close()outfile_stats = outdir + "/proportion_coupling_links_coms_layer2"f = open(outfile_stats, 'w')for id_node in nodes_edges_layer2_inside_coms:	p = nodes_edges_couplings[id_node] / (1.0 * nodes_edges_layer2_inside_coms[id_node])	f.write(id_node + " " + str(p) + '\n')f.close()'''nb_nodes_l1 = len(nodes_layer1)nb_nodes_l2 = len(nodes_layer2)outfile_stats = outdir + "/relation_links_coms_layer1_coupling"f = open(outfile_stats, 'w')for id_com_l1 in range(0, id_com_layer1):	nb_links_com = 0	nb_links_couplings = 0	nb_nodes_com = len(coms_nodes[id_com_l1])	for id_node in coms_nodes[id_com_l1]:		nb_links_couplings += nodes_edges_couplings[id_node]		nb_links_com += nodes_edges_layer1_inside_coms[id_node]	nb_links_com_max = (nb_nodes_com * (nb_nodes_com - 1))	nb_links_couplings_max = nb_nodes_l2 * nb_nodes_com * 1.0	r = (nb_links_couplings / nb_links_couplings_max * 1.0) + (nb_links_com / nb_links_com_max * 1.0)	f.write(str(id_com_l1) + " " + str(r) + '\n')f.close()outfile_stats = outdir + "/relation_links_coms_layer2_coupling"f = open(outfile_stats, 'w')for id_com_l2 in range(id_com_layer1, id_com_layer2): 	nb_links_com = 0	nb_links_couplings = 0	nb_nodes_com = len(coms_nodes[id_com_l2])	for id_node in coms_nodes[id_com_l2]:		nb_links_couplings += nodes_edges_couplings[id_node]		nb_links_com += nodes_edges_layer2_inside_coms[id_node]	nb_links_com_max = (nb_nodes_com * (nb_nodes_com - 1))	nb_links_couplings_max = nb_nodes_l1 * nb_nodes_com * 1.0	r = (nb_links_couplings / nb_links_couplings_max * 1.0) + (nb_links_com / nb_links_com_max * 1.0)	f.write(str(id_com_l2) + " " + str(r) + '\n')f.close()